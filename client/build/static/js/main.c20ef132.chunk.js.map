{"version":3,"sources":["logo.svg","Components/Test.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","types","id","name","Test","state","endpoint","type","params","handleChange","event","setState","target","value","callApi","axios","url","encodeURI","method","headers","data","withCredentials","xsrfCookieName","then","res","console","log","classes","this","props","className","root","Grid","container","direction","justify","alignItems","spacing","item","xs","TextField","fullWidth","select","label","onChange","margin","disabled","textFieldsDisabled","map","option","MenuItem","key","Button","onClick","Component","withStyles","theme","flexGrow","padding","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"qKAAAA,EAAOC,QAAU,IAA0B,kC,gOCgBrCC,EAAQ,CACV,CACIC,GAAI,MACJC,KAAM,OAER,CACED,GAAI,MACJC,KAAM,OAER,CACID,GAAI,OACJC,KAAM,QAEV,CACID,GAAI,QACJC,KAAM,UAKVC,E,2MACFC,MAAQ,CACJC,SAAU,GACVC,KAAM,GACNC,OAAQ,I,EAGZC,aAAe,SAAAN,GAAI,OAAI,SAAAO,GACnB,EAAKC,SAAL,eAAiBR,EAAOO,EAAME,OAAOC,U,EAGzCC,QAAU,WACNC,IAAM,CACFC,IAAKC,UAAU,EAAKZ,MAAMC,UAC1BY,OAAQ,EAAKb,MAAME,KACnBY,QAAU,CAAE,eAAiB,oBAC7BC,KAA0B,KAApB,EAAKf,MAAMG,OAAY,EAAKH,MAAMG,OAAO,KAC/Ca,iBAAiB,EACjBC,eAAgB,eACjBC,KAAK,SAAAC,GACJC,QAAQC,IAAIF,M,wEAIV,IAAD,OACGG,EAAYC,KAAKC,MAAjBF,QACR,OACI,yBAAKG,UAAWH,EAAQI,MACpB,kBAACC,EAAA,EAAD,CAAMC,WAAS,EAACC,UAAU,MAAMC,QAAQ,eAAeC,WAAW,aAAaC,QAAS,IACxF,kBAACL,EAAA,EAAD,CAAMM,MAAI,EAACC,GAAI,IACX,kBAACC,EAAA,EAAD,CACAC,WAAW,EACXvC,GAAG,OACHwC,QAAM,EACNC,MAAM,OACN9B,MAAOe,KAAKvB,MAAME,KAClBqC,SAAUhB,KAAKnB,aAAa,QAC5BoC,OAAO,SACPC,SAAUlB,KAAKC,MAAMkB,oBAEpB9C,EAAM+C,IAAI,SAAAC,GAAM,OACjB,kBAACC,EAAA,EAAD,CAAUC,IAAKF,EAAO/C,GAAIW,MAAOoC,EAAO/C,IACnC+C,EAAO9C,UAKZ,kBAAC6B,EAAA,EAAD,CAAMM,MAAI,EAACC,GAAI,IACX,kBAACC,EAAA,EAAD,CACAtC,GAAG,MACHyC,MAAM,eACN9B,MAAOe,KAAKvB,MAAMC,SAClBsC,SAAUhB,KAAKnB,aAAa,YAC5BoC,OAAO,SACPJ,WAAW,KAGnB,kBAACT,EAAA,EAAD,CAAMM,MAAI,EAACC,GAAI,IACX,kBAACC,EAAA,EAAD,CACAtC,GAAG,SACHyC,MAAM,oBACN9B,MAAOe,KAAKvB,MAAMG,OAClBoC,SAAUhB,KAAKnB,aAAa,UAC5BoC,OAAO,SACPJ,WAAW,KAGX,kBAACT,EAAA,EAAD,CAAMM,MAAI,EAACC,GAAI,IACX,kBAACa,EAAA,EAAD,CAAQX,WAAW,EAAMY,QAAS,kBAAI,EAAKvC,WAC3CgC,SAA4B,KAAlBlB,KAAKvB,MAAME,MAAmC,KAAtBqB,KAAKvB,MAAMC,UAD7C,mB,GApELgD,aA6EJC,cAxGA,SAAAC,GAAK,MAAK,CACrBzB,KAAM,CACJ0B,SAAU,EACVC,QAAS,UAqGAH,CAAmBnD,GCxGnBuD,MAJf,WACE,OAAO,kBAAC,EAAD,OCMWC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMhD,KAAK,SAAAiD,GACjCA,EAAaC,iB","file":"static/js/main.c20ef132.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\r\nimport axios from 'axios';\r\nimport Button from '@material-ui/core/Button';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport { withStyles } from '@material-ui/core';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\n\r\n\r\nconst styles = theme => ({\r\n    root: {\r\n      flexGrow: 1,\r\n      padding: \"12px\",\r\n    }\r\n})\r\n\r\nconst types = [\r\n    {\r\n        id: 'GET',\r\n        name: 'GET'\r\n      },\r\n      {\r\n        id: 'PUT',\r\n        name: 'PUT'\r\n      },\r\n      {\r\n          id: 'POST',\r\n          name: 'POST'\r\n      },\r\n      {\r\n          id: 'PATCH',\r\n          name: 'PATCH'\r\n      }\r\n]\r\n\r\n\r\nclass Test extends Component {\r\n    state = {\r\n        endpoint: '',\r\n        type: '',\r\n        params: ''\r\n    }\r\n\r\n    handleChange = name => event => {\r\n        this.setState({ [name]: event.target.value });\r\n    };\r\n\r\n    callApi = () => {\r\n        axios({\r\n            url: encodeURI(this.state.endpoint),\r\n            method: this.state.type,\r\n            headers : { 'Content-type' : 'application/json' },\r\n            data: this.state.params!==''?this.state.params:null,\r\n            withCredentials: true,\r\n            xsrfCookieName: 'XSRF-TOKEN'\r\n        }).then(res=>{\r\n            console.log(res)\r\n        })\r\n    }\r\n\r\n    render() {\r\n        const { classes } = this.props\r\n        return(\r\n            <div className={classes.root}>\r\n                <Grid container direction=\"row\" justify=\"space-around\" alignItems=\"flex-start\" spacing={24}>\r\n                <Grid item xs={12}>\r\n                    <TextField\r\n                    fullWidth={true}\r\n                    id=\"type\"\r\n                    select\r\n                    label=\"Type\"\r\n                    value={this.state.type}\r\n                    onChange={this.handleChange('type')}\r\n                    margin=\"normal\"\r\n                    disabled={this.props.textFieldsDisabled}\r\n                    >\r\n                    {types.map(option => (\r\n                    <MenuItem key={option.id} value={option.id}>\r\n                        {option.name}\r\n                    </MenuItem>\r\n                    ))}\r\n                </TextField>\r\n                </Grid>\r\n                    <Grid item xs={12}>\r\n                        <TextField\r\n                        id=\"api\"\r\n                        label=\"API endpoint\"\r\n                        value={this.state.endpoint}\r\n                        onChange={this.handleChange('endpoint')}\r\n                        margin=\"normal\"\r\n                        fullWidth={true}\r\n                        />\r\n                    </Grid>\r\n                <Grid item xs={12}>\r\n                    <TextField\r\n                    id=\"params\"\r\n                    label=\"Params (optional)\"\r\n                    value={this.state.params}\r\n                    onChange={this.handleChange('params')}\r\n                    margin=\"normal\"\r\n                    fullWidth={true}\r\n                    />\r\n                </Grid>\r\n                    <Grid item xs={12}>\r\n                        <Button fullWidth={true} onClick={()=>this.callApi()}\r\n                        disabled={this.state.type==='' || this.state.endpoint===''?true:false}>Call API</Button>\r\n                    </Grid>\r\n                </Grid>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default withStyles(styles)(Test);","import React from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport Test from \"./Components/Test\";\n\nfunction App() {\n  return <Test />;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}